# -*- mode: ruby -*-
# vi: set ft=ruby :

disk_size = 5 * 1024

file_root = File.dirname(File.expand_path(__FILE__))

$nvme_disks = {
    File.join(file_root, "nvme0.vdi") => "0",
    File.join(file_root, "nvme1.vdi") => "1"
}

$disk_size = disk_size.to_s

class VagrantPlugins::ProviderVirtualBox::Action::SetName
    alias_method :original_call, :call
    def call(env)
        ui = env[:ui]
        controller_name = "NVMe"
        driver = env[:machine].provider.driver
        uuid = driver.instance_eval { @uuid }
        vm_info = driver.execute("showvminfo", uuid)
        has_controller = vm_info.match("Storage Controller Name.*#{controller_name}")

        if !has_controller
            ui.info "Creating storage controller '#{controller_name}'..."
            driver.execute(
                "storagectl", uuid,
                "--name", "#{controller_name}",
                "--add", "pcie",
                "--controller", "NVMe",
                "--portcount", "2",
                "--hostiocache", "off"
            )
        end

        $nvme_disks.each do |disk_file, port|
            if !File.exist?(disk_file)
                ui.info "Creating storage file '#{disk_file}'..."
                driver.execute(
                  "createmedium", "disk",
                  "--filename", disk_file,
                  "--format", "VDI",
                  "--size", $disk_size,
                  "--variant", "Fixed"
                )
            end

            ui.info "Attaching '#{disk_file}' to '#{controller_name}'..."
            driver.execute(
                "storageattach", uuid,
                "--storagectl", "#{controller_name}",
                "--port", port,
                "--device", "0",
                "--type", "hdd",
                '--nonrotational', 'on',
                "--medium", disk_file,
                "--mtype", "shareable"
            )
        end
        original_call(env)
    end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/xenial64"
  config.vm.box_check_update = false

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    vb.memory = "1024"
  end

  config.vm.define "iscsi-target0" do |target0|
    target0.vm.network "private_network", ip: "10.0.1.100"
    target0.vm.provider "virtualbox" do |vb|
      vb.name = "iscsi-target0"
    end

    target0.vm.provision "shell", inline: <<-SHELL
      locale-gen
      sudo apt-get update && apt-get install -y targetcli

      sudo lvm vgcreate nvmegroup /dev/nvme0n1 /dev/nvme0n2
      sudo lvm lvcreate nvmegroup -L 3G
      sudo lvm lvcreate nvmegroup -L 3G
      sudo lvm lvcreate nvmegroup -L 3G

      sudo targetcli /backstores/iblock create name=lvol0 dev=/dev/nvmegroup/lvol0
      sudo targetcli /backstores/iblock create name=lvol1 dev=/dev/nvmegroup/lvol1
      sudo targetcli /backstores/iblock create name=lvol2 dev=/dev/nvmegroup/lvol2

      sudo targetcli /iscsi create iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2

      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1 set attribute authentication=0 demo_mode_write_protect=0 generate_node_acls=1 cache_dynamic_acls=1

      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/portals create ip_address=10.0.1.100

      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/luns create storage_object=/backstores/iblock/lvol0
      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/luns create storage_object=/backstores/iblock/lvol1
      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/luns create storage_object=/backstores/iblock/lvol2

      yes | sudo targetcli saveconfig
    SHELL

  end

  config.vm.define "iscsi-target1" do |target1|
    target1.vm.network "private_network", ip: "10.0.1.101"
    target1.vm.provider "virtualbox" do |vb|
      vb.name = "iscsi-target1"
    end
    target1.vm.provision "shell", inline: <<-SHELL
      locale-gen
      sudo apt-get update && apt-get install -y targetcli
      sudo lvm vgscan
      sudo lvm lvscan

      sudo targetcli /backstores/iblock create name=lvol0 dev=/dev/nvmegroup/lvol0
      sudo targetcli /backstores/iblock create name=lvol1 dev=/dev/nvmegroup/lvol1
      sudo targetcli /backstores/iblock create name=lvol2 dev=/dev/nvmegroup/lvol2

      sudo targetcli /iscsi create iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2

      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1 set attribute authentication=0 demo_mode_write_protect=0 generate_node_acls=1 cache_dynamic_acls=1

      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/portals create ip_address=10.0.1.101

      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/luns create storage_object=/backstores/iblock/lvol0
      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/luns create storage_object=/backstores/iblock/lvol1
      sudo targetcli /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu-xenial.x8664:sn.ba53b24fa0e2/tpg1/luns create storage_object=/backstores/iblock/lvol2

      yes | sudo targetcli saveconfig
    SHELL
  end
end
